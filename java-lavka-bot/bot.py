# -*- coding: utf-8 -*-
from enum import Enum
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ò (–ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –°–í–û–ò!) ===
BOT_TOKEN = "8398708431:AAHgw4d9FxGD7dqc1RHsKDMaHBTQpo6ryuw"  # ‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å: –ù–ï–¢ –ü–†–û–ë–ï–õ–û–í!
CHAT_ID = 5616310180  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–∫–∞–∑—ã

# === –°–û–°–¢–û–Ø–ù–ò–Ø –†–ê–ó–ì–û–í–û–†–ê ===
class States(Enum):
    NAME = 0
    DISTRICT = 1
    PHONE = 2
    ITEMS = 3
    DELIVERY = 4
    CONFIRM = 5

# === –î–ê–ù–ù–´–ï –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† ===
DISTRICTS = ["–¶–µ–Ω—Ç—Ä", "–°–µ–≤–µ—Ä", "–Æ–≥", "–ó–∞–ø–∞–¥", "–í–æ—Å—Ç–æ–∫"]
DELIVERY_TYPES = ["üöó –î–æ—Å—Ç–∞–≤–∫–∞", "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑"]


def create_keyboard(buttons: list, columns: int = 2) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤.
    """
    keyboard = []
    for i in range(0, len(buttons), columns):
        row = [KeyboardButton(text=item) for item in buttons[i:i + columns]]
        keyboard.append(row)
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ‚Äî –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Java Lavka</b>! ‚ú®\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
        parse_mode='HTML'
    )
    return States.NAME.value


async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    context.user_data['name'] = update.message.text.strip()

    # –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_btn = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    district_kb = create_keyboard(DISTRICTS)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º .keyboard –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
    try:
        keyboard_rows = [list(row) for row in district_kb.keyboard]
    except TypeError:
        keyboard_rows = district_kb.keyboard  # –µ—Å–ª–∏ –∏ —Ç–∞–∫ list

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å–≤–µ—Ä—Ö—É
    full_keyboard = [[location_btn]] + keyboard_rows
    reply_markup = ReplyKeyboardMarkup(full_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=reply_markup
    )
    return States.DISTRICT.value


async def process_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if update.message.location:
        loc = update.message.location
        context.user_data['location'] = f"{loc.latitude:.6f},{loc.longitude:.6f}"
        context.user_data['district'] = "üìç –ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: {context.user_data['location']}")
    else:
        context.user_data['district'] = update.message.text.strip()

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞
    phone_btn = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    reply_markup = ReplyKeyboardMarkup(
        [[phone_btn], ["/cancel"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        "üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>+79991234567</code> –∏–ª–∏ <code>89991234567</code>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return States.PHONE.value


async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
        if not re.match(r'^(\+7|8)\d{10}$', phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!\n"
                "–ü—Ä–∏–º–µ—Ä: <code>+79991234567</code>",
                parse_mode='HTML'
            )
            return States.PHONE.value

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7
    phone = re.sub(r'^8', '+7', phone)
    context.user_data['phone'] = phone

    await update.message.reply_text(
        "üõí –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)
    )
    return States.ITEMS.value


async def process_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    context.user_data['items'] = update.message.text.strip()

    await update.message.reply_text(
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=create_keyboard(DELIVERY_TYPES)
    )
    return States.DELIVERY.value


async def process_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–∫–∞–∑ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    context.user_data['delivery'] = update.message.text.strip()

    order_text = (
        "üõí <b>–í–∞—à –∑–∞–∫–∞–∑</b>:\n\n"
        f"üë§ <b>–ò–º—è</b>: {context.user_data['name']}\n"
        f"üìç <b>–†–∞–π–æ–Ω</b>: {context.user_data['district']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {context.user_data['phone']}\n"
        f"üì¶ <b>–¢–æ–≤–∞—Ä—ã</b>: {context.user_data['items']}\n"
        f"üöö <b>–°–ø–æ—Å–æ–±</b>: {context.user_data['delivery']}"
    )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_edit")
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        ]
    ])

    await update.message.reply_text(
        order_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    return States.CONFIRM.value


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_yes":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_msg = (
            "üöÄ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>!\n\n"
            f"üë§ <b>–ò–º—è</b>: {context.user_data['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {context.user_data['phone']}\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä—ã</b>: {context.user_data['items']}\n"
            f"üöö <b>–°–ø–æ—Å–æ–±</b>: {context.user_data['delivery']}"
        )
        if 'location' in context.user_data:
            admin_msg += f"\nüìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</b>: {context.user_data['location']}"

        try:
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=admin_msg,
                parse_mode='HTML'
            )
            await query.edit_message_text(
                "üéâ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                "–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode='HTML'
            )
            logger.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await query.edit_message_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    elif query.data == "confirm_edit":
        await query.edit_message_text("üîÑ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")

    else:  # confirm_no
        await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
    await update.message.reply_text(
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π ‚Äî –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = ApplicationBuilder().token(BOT_TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                States.NAME.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_name)
                ],
                States.DISTRICT.value: [
                    MessageHandler(filters.TEXT | filters.LOCATION, process_district)
                ],
                States.PHONE.value: [
                    MessageHandler(filters.TEXT | filters.CONTACT, process_phone)
                ],
                States.ITEMS.value: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_items)
                ],
                States.DELIVERY.value: [
                    MessageHandler(
                        filters.Regex(f"^({'|'.join(map(re.escape, DELIVERY_TYPES))})$"),
                        process_delivery
                    )
                ],
                States.CONFIRM.value: [
                    CallbackQueryHandler(confirm_order)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                MessageHandler(filters.Regex("^/cancel$"), cancel)
            ],
            per_message=False,
            allow_reentry=True
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler('cancel', cancel))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    main()